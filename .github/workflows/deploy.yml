# .github/workflows/deploy.yml

name: Build and Deploy Jekyll Site

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"] # Change this if your default branch is different (e.g., master)

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: 'npm'
      - name: Install NPM Dependencies
        run: npm install
      - name: Build Tailwind CSS (--help)
        # Use npx --package to bypass local bin linking issues
        # Run --help to see if the executable can be invoked at all
        run: npx --package=tailwindcss@^4.1.4 tailwindcss --help        
    #   - name: Check node_modules/.bin contents
    #     run: ls -l node_modules/.bin
    #   - name: Build Tailwind CSS
    #     # Explicitly call the binary from node_modules/.bin
    #     run: node_modules/.bin/tailwindcss -i ./assets/css/tailwind.css -o ./assets/css/output.css
    #   - name: Setup Ruby
    #     uses: ruby/setup-ruby@v1 # Uses .ruby-version and Gemfile automatically
    #     with:
    #       bundler-cache: true # Automatically runs bundle install and caches gems
    #   - name: Setup Pages
    #     id: pages # Add id for output usage
    #     uses: actions/configure-pages@v4
    #   - name: Build Jekyll site
    #     # Uses the GITHUB_PAGES_URL environment variable set by the configure-pages action
    #     # Also uses the JEKYLL_ENV=production environment variable by default
    #     run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" # Use base_path output
    #     env:
    #       JEKYLL_ENV: production
    #   - name: Upload artifact
    #     uses: actions/upload-pages-artifact@v3
    #     with:
    #       path: './_site'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 